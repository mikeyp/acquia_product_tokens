<?php
/**
 * @file
 * This module provides tokens for all the different Acquia Products.
 */

/**
 * Implements hook_token_info().
 *
 * Lists tokens for all the different Acquia products.
 */
function acquia_product_tokens_token_info() {
  $tokens = array();
  // Obtain all the Acquia Products defined by the Administrator.
  $product_tokens = \Drupal::service('acquia_product_tokens.token')->getValues();
  foreach ($product_tokens as $name => $product_token) {
    $tokens[$name] = array(
      'name' => $product_token['product_name'],
    );
  }
  $type = array(
    'name' => t('Acquia product'),
    'description' => t('Tokens for representing Acquia product names (becuase marketing likes to change them).'),
  );
  return array(
    'types' => array('acquia-product' => $type),
    'tokens' => array('acquia-product' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function acquia_product_tokens_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'acquia-product') {
    $config = \Drupal::config('acquia_product_tokens.settings');
    $bubbleable_metadata->addCacheableDependency($config);
    foreach ($tokens as $name => $original) {
      $values = \Drupal::service('acquia_product_tokens.token')->getValues();
      if (isset($values[$name])) {
        $replacements[$original] = $values[$name]['product_name'];
      }
      else {
        $replacements[$original] = $config->get('missing_token_text');
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_load()
 *
 * @param \Drupal\node\NodeInterface[] $entities
 *   The entities keyed by entity ID.
 */
function acquia_product_tokens_node_load(array $entities) {
  foreach ($entities as $nid => $node) {
    if (isset($node->token_title)) {
      $title = $node->token_title->value;
      if (strpos($title, '[acquia-product:') !== FALSE) {
        $node->setTitle(\Drupal::service('acquia_product_tokens.token')->replace($title));
        $node->addCacheTags(array('config:acquia_product_tokens.settings'));
      }
      elseif ($title) {
        $node->setTitle($title);
      }
    }
  }
}

/**
 * Post-render callback.
 *
 * @param string $html
 *   The already rendered string.
 * @param array $elements
 *   The render array being rendered
 *
 * @return string
 *   The content with Acquia Product tokens replaced.
 */
function acquia_product_tokens_render_post_render($html, array $elements) {
  return \Drupal::service('acquia_product_tokens.token')->replace($html);
}

/**
 * Replaces all Acquia product tokens in the outputs of all views.
 */
function acquia_product_tokens_views_post_render(\Drupal\views\ViewExecutable $view, &$output, \Drupal\views\Plugin\views\cache\CachePluginBase $cache) {
  if (is_array($output)) {
    if (empty($output['#post_render'])) {
      $output['#post_render'] = array();
    }
    $output['#post_render'][] = 'acquia_product_tokens_render_post_render';
  }
}

/**
 * Implementation of hook_entity_base_field_info()
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @return array
 */
function acquia_product_tokens_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    return acquia_product_tokens_node_fields();
  }
}

function acquia_product_tokens_node_fields() {
  $fields = array();
  $fields['token_title'] = \Drupal\Core\Field\BaseFieldDefinition::create('string')
    ->setLabel(t('Title with tokens'))
    ->setRequired(TRUE)
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setSetting('max_length', 255)
    ->setDisplayOptions('view', array(
      'type' => 'hidden',
    ))
    ->setDisplayOptions('form', array(
      'type' => 'string_textfield',
      'weight' => -6,
    ))
    ->setDisplayConfigurable('form', TRUE);

  return $fields;
}