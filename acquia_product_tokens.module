<?php
/**
 * @file
 * This module provides tokens for all the different Acquia Products.
 */

/**
 * Implements hook_token_info().
 *
 * Lists tokens for all the different Acquia products.
 */
function acquia_product_tokens_token_info() {
  $tokens = array();
  // Obtain all the Acquia Products defined by the Administrator.
  $product_tokens = acquia_product_tokens_get_values();
  foreach ($product_tokens as $product_token) {
    $tokens[$product_token['token']] = array(
      'name' => $product_token['product_name'],
    );
  }
  $type = array(
    'name' => t('Acquia product'),
    'description' => t('Tokens for representing Acquia product names (becuase marketing likes to change them).'),
  );
  return array(
    'types' => array('acquia-product' => $type),
    'tokens' => array('acquia-product' => $tokens),
  );
}

/**
 * Implements hook_token_values().
 */
function acquia_product_tokens_token_values($type, $object = NULL, $options = array()) {
  $values = array();
  return $values;
  switch ($type) {
    case 'global':
      $product_tokens = acquia_product_tokens_get_values();
      foreach ($product_tokens as $product_token) {
        $values[$product_token['token']] = $product_token['product_name'];
      }
      break;
  }
  return $values;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function acquia_product_tokens_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if (empty($build['title']['#post_render'])) {
    $build['title']['#post_render'] = array();
  }
  $build['title']['#post_render'][] = 'acquia_product_tokens_render_post_render';
}

/**
 * Post-render callback.
 *
 * @param string $html
 *   The already rendered string.
 * @param array $elements
 *   The render array being rendered
 *
 * @return string
 *   The content with Acquia Product tokens replaced.
 */
function acquia_product_tokens_render_post_render($html, array $elements) {
  // @todo create a UI setting for this.
  $options['clear'] = TRUE;
  return \Drupal::service('acquia_product_tokens.token')->replace($html, array(), $options);
}

/**
 * Replaces all Acquia product tokens in the outputs of all views.
 */
function acquia_product_tokens_views_post_render(\Drupal\views\ViewExecutable $view, &$output, \Drupal\views\Plugin\views\cache\CachePluginBase $cache) {
  if (is_array($output)) {
    if (empty($output['#post_render'])) {
      $output['#post_render'] = array();
    }
    $output['#post_render'][] = 'acquia_product_tokens_render_post_render';
  }
}

/**
 * Converts text inserted by user into product/token array.
 */
function acquia_product_tokens_get_values() {
  return array();
  $text = variable_get('acquia_product_tokens', '');
  $products_tokens = array();
  $lines = explode("\n", $text);
  foreach ($lines as $line) {
    if (!empty($line)) {
      list($product_name, $token) = explode('|', $line);
      $product_token = array();
      $product_token['product_name'] = check_plain(trim($product_name));
      $product_token['token'] = check_plain(trim($token));
      $product_tokens[] = $product_token;
    }
  }
  return $product_tokens;
}

/**
 * Wrapper function that searches and replaces tokens in the input text.
 */
function acquia_product_tokens_replace($text) {
  $output = preg_replace_callback("|\[token ([^ ]*) ([^]]*)\]|i", 'token_filter_replacetoken', $text);
  return $output;
}

/**
 * Implements hook_preprocess().
 *
 * This function operates at the module level to change the HTML that
 * is sent to the theme, after replacing product tokens.
 *
 * This function replaces tokens for blocks and faq-qa templates.
 * Implementation of other templates have to be included here.
 */
function acquia_product_tokens_preprocess(&$variables, $hook) {
  if (isset($variables['block']->module) && $variables['block']->module == 'book') {
    // Corrects the output in the blocks.
    $variables['block']->content = acquia_product_tokens_replace($variables['block']->content);
  }
  elseif (isset($variables['book_link']['module']) && $variables['book_link']['module'] == 'book') {
    // Corrects the output in the book links at the bottom of the node.
    $variables['prev_title'] = acquia_product_tokens_replace($variables['prev_title']);
    $variables['next_title'] = acquia_product_tokens_replace($variables['next_title']);
  }
  elseif (isset($variables['class']) && $variables['class'] == 'faq-qa') {
    // Corrects the output in the faq.
    foreach ($variables['data'] as $key => $node) {
      $variables['data'][$key]->title = acquia_product_tokens_replace($node->title);
      $variables['data'][$key]->question = acquia_product_tokens_replace($node->question);
    }
    foreach ($variables['question_list'] as $key => $question) {
      $variables['question_list'][$key] = acquia_product_tokens_replace($question);
    }
  }
  else {
  }
}

