<?php
/**
 * @file
 * This module provides tokens for all the different Acquia Products.
 */

/**
 * Implements hook_token_info().
 *
 * Lists tokens for all the different Acquia products.
 */
function acquia_product_tokens_token_info() {
  $tokens = array();
  // Obtain all the Acquia Products defined by the Administrator.
  $product_tokens = \Drupal::service('acquia_product_tokens.token')->getValues();
  foreach ($product_tokens as $name => $product_token) {
    $tokens[$name] = array(
      'name' => $product_token['product_name'],
    );
  }
  $type = array(
    'name' => t('Acquia product'),
    'description' => t('Tokens for representing Acquia product names (becuase marketing likes to change them).'),
  );
  return array(
    'types' => array('acquia-product' => $type),
    'tokens' => array('acquia-product' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function acquia_product_tokens_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'acquia-product') {
    $config = \Drupal::config('acquia_product_tokens.settings');
    $bubbleable_metadata->addCacheableDependency($config);
    foreach ($tokens as $name => $original) {
      $values = \Drupal::service('acquia_product_tokens.token')->getValues();
      if (isset($values[$name])) {
        $replacements[$original] = $values[$name]['product_name'];
      }
      else {
        $replacements[$original] = $config->get('missing_token_text');
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function acquia_product_tokens_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if (empty($build['title']['#post_render'])) {
    $build['title']['#post_render'] = array();
  }
  $build['title']['#post_render'][] = 'acquia_product_tokens_render_post_render';
}

/**
 * Post-render callback.
 *
 * @param string $html
 *   The already rendered string.
 * @param array $elements
 *   The render array being rendered
 *
 * @return string
 *   The content with Acquia Product tokens replaced.
 */
function acquia_product_tokens_render_post_render($html, array $elements) {
  return \Drupal::service('acquia_product_tokens.token')->replace($html);
}

/**
 * Replaces all Acquia product tokens in the outputs of all views.
 */
function acquia_product_tokens_views_post_render(\Drupal\views\ViewExecutable $view, &$output, \Drupal\views\Plugin\views\cache\CachePluginBase $cache) {
  if (is_array($output)) {
    if (empty($output['#post_render'])) {
      $output['#post_render'] = array();
    }
    $output['#post_render'][] = 'acquia_product_tokens_render_post_render';
  }
}

/**
 * Implments hook_preprocess_book_tree()
 *
 * @param $variables
 */
function acquia_product_tokens_preprocess_book_tree(array &$variables) {
  if (!empty($variables['items'])) {
    acquia_product_tokens_recurse_book_tree($variables['items']);
  }
}

/**
 * Recursive helper function to replace titles in book navigation.
 *
 * @param array $items
 */
function acquia_product_tokens_recurse_book_tree(array &$items) {
  foreach ($items as $idx => $item) {
    $items[$idx]['title'] = \Drupal::service('acquia_product_tokens.token')->replace($item['title']);
    if (!empty($items[$idx]['below'])) {
      acquia_product_tokens_recurse_book_tree($items[$idx]['below']);
    }
  }
}

/**
 * Implments hook_preprocess_book_tree()
 *
 * @param $variables
 */
function acquia_product_tokens_preprocess_book_navigation(array &$variables) {
  // Corrects the output in the book links at the bottom of the node.
  $variables['prev_title'] = \Drupal::service('acquia_product_tokens.token')->replace($variables['prev_title']);
  $variables['next_title'] = \Drupal::service('acquia_product_tokens.token')->replace($variables['next_title']);
}

/**
 * Implements hook_preprocess().
 *
 * This function operates at the module level to change the HTML that
 * is sent to the theme, after replacing product tokens.
 *
 * This function replaces tokens for blocks and faq-qa templates.
 * Implementation of other templates have to be included here.
 */
function acquia_product_tokens_preprocess(&$variables, $hook) {
  if (isset($variables['class']) && $variables['class'] == 'faq-qa') {
    // Corrects the output in the faq.
    foreach ($variables['data'] as $key => $node) {
      $variables['data'][$key]->title = acquia_product_tokens_replace($node->title);
      $variables['data'][$key]->question = acquia_product_tokens_replace($node->question);
    }
    foreach ($variables['question_list'] as $key => $question) {
      $variables['question_list'][$key] = acquia_product_tokens_replace($question);
    }
  }
}

